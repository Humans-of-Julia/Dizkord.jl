var documenterSearchIndex = {"docs":
[{"location":"client/","page":"Client","title":"Client","text":"CurrentModule = Ekztazy","category":"page"},{"location":"client/#Client","page":"Client","title":"Client","text":"","category":"section"},{"location":"client/","page":"Client","title":"Client","text":"Client\nenable_cache!\ndisable_cache!\nme","category":"page"},{"location":"client/#Ekztazy.Client","page":"Client","title":"Ekztazy.Client","text":"Client(\n    token::String\n    application_id::Snowflake\n    intents::Int;\n    presence::Union{Dict, NamedTuple}=Dict(),\n    strategies::Dict{DataType, <:CacheStrategy}=Dict(),\n    version::Int=9,\n) -> Client\n\nA Discord bot. Clients can connect to the gateway, respond to events, and make REST API calls to perform actions such as sending/deleting messages, kicking/banning users, etc.\n\nBot Token\n\nA bot token can be acquired by creating a new application here. Make sure not to hardcode the token into your Julia code! Use an environment variable or configuration file instead.\n\nApplication ID\n\nThe application id for your bot can be found here.  Make sure not to hardcode the application id into your Julia code!  Use an environment variable or configuration file instead.\n\nIntents\n\nInteger representing intents. More information here.\n\nPresence\n\nThe presence keyword sets the bot's presence upon connection. It also sets defaults for future calls to set_game. The schema here must be followed.\n\nCache Control\n\nBy default, most data that comes from Discord is cached for later use. However, to avoid memory leakage, not all of it is kept forever. The default setings are to keep everything but Messages, which are deleted after 6 hours, forever. Although the default settings are sufficient for most workloads, you can specify your own strategies per type with the strategies keyword. Keys can be any of the following:\n\nGuild\nDiscordChannel\nMessage\nUser\nMember\nPresence\n\nFor potential values, see CacheStrategy.\n\nThe cache can also be disabled/enabled permanently and temporarily as a whole with enable_cache! and disable_cache!.\n\nAPI Version\n\nThe version keyword chooses the Version of the Discord API to use. Using anything but 9 is not officially supported by the Ekztazy.jl developers.\n\nSharding\n\nSharding is handled automatically. The number of available processes is the number of shards that are created. See the sharding example for more details.\n\n\n\n\n\n","category":"type"},{"location":"client/#Ekztazy.enable_cache!","page":"Client","title":"Ekztazy.enable_cache!","text":"enable_cache!(c::Client)\nenable_cache!(f::Function c::Client)\n\nEnable the cache. do syntax is also accepted.\n\n\n\n\n\n","category":"function"},{"location":"client/#Ekztazy.disable_cache!","page":"Client","title":"Ekztazy.disable_cache!","text":"disable_cache!(c::Client)\ndisable_cache!(f::Function, c::Client)\n\nDisable the cache. do syntax is also accepted.\n\n\n\n\n\n","category":"function"},{"location":"client/#Ekztazy.me","page":"Client","title":"Ekztazy.me","text":"me(c::Client) -> Nullable{User}\n\nGet the Client's bot user.\n\n\n\n\n\n","category":"function"},{"location":"client/#Gateway","page":"Client","title":"Gateway","text":"","category":"section"},{"location":"client/","page":"Client","title":"Client","text":"Base.open\nBase.isopen\nBase.close\nBase.wait\nrequest_guild_members\nupdate_voice_state\nupdate_status\nheartbeat_ping\nstart","category":"page"},{"location":"client/#Base.open","page":"Client","title":"Base.open","text":"open(c::Client; delay::Period=Second(7))\n\nConnect a Client to the Discord gateway.\n\nThe delay keyword is the time between shards connecting. It can be increased from its default if you are using multiple shards and frequently experiencing invalid sessions upon  connection.\n\n\n\n\n\n","category":"function"},{"location":"client/#Base.isopen","page":"Client","title":"Base.isopen","text":"isopen(c::Client) -> Bool\n\nDetermine whether the Client is connected to the gateway.\n\n\n\n\n\n","category":"function"},{"location":"client/#Base.close","page":"Client","title":"Base.close","text":"close(c::Client)\n\nDisconnect the Client from the gateway.\n\n\n\n\n\n","category":"function"},{"location":"client/#Base.wait","page":"Client","title":"Base.wait","text":"wait(c::Client)\n\nWait for an open Client to close.\n\n\n\n\n\n","category":"function"},{"location":"client/#Ekztazy.request_guild_members","page":"Client","title":"Ekztazy.request_guild_members","text":"request_guild_members(\n    c::Client,\n    guilds::Union{Integer, Vector{<:Integer};\n    query::AbstractString=\"\",\n    limit::Int=0,\n) -> Bool\n\nRequest offline guild members of one or more Guilds. GuildMembersChunk events are sent by the gateway in response. More details here.\n\n\n\n\n\n","category":"function"},{"location":"client/#Ekztazy.update_voice_state","page":"Client","title":"Ekztazy.update_voice_state","text":"update_voice_state(\n    c::Client,\n    guild::Integer,\n    channel::Nullable{Integer},\n    mute::Bool,\n    deaf::Bool,\n) -> Bool\n\nJoin, move, or disconnect from a voice channel. A VoiceStateUpdate event is sent by the gateway in response. More details here.\n\n\n\n\n\n","category":"function"},{"location":"client/#Ekztazy.update_status","page":"Client","title":"Ekztazy.update_status","text":"update_status(\n    c::Client,\n    since::Nullable{Int},\n    activity::Nullable{Activity},\n    status::Union{PresenceStatus, AbstractString},\n    afk::Bool,\n) -> Bool\n\nIndicate a presence or status update. A PresenceUpdate event is sent by the gateway in response. More details here.\n\n\n\n\n\n","category":"function"},{"location":"client/#Ekztazy.heartbeat_ping","page":"Client","title":"Ekztazy.heartbeat_ping","text":"heartbeat_ping(c::Client) -> Nullable{Period}\n\nGet the Client's ping time to the gateway. If the client is not connected, or no heartbeats have been sent/acknowledged, nothing is returned.\n\n\n\n\n\n","category":"function"},{"location":"client/#Ekztazy.start","page":"Client","title":"Ekztazy.start","text":"start(c::Client)\n\nCreates a handler to generate ApplicationCommands.\n\nCreates handlers for GuildCreate events.\n\nCalls open then wait on the Client.\n\n\n\n\n\n","category":"function"},{"location":"client/#Caching","page":"Client","title":"Caching","text":"","category":"section"},{"location":"client/","page":"Client","title":"Client","text":"CacheStrategy\nCacheForever\nCacheNever\nCacheTTL\nCacheLRU\nCacheFilter","category":"page"},{"location":"client/#Ekztazy.CacheStrategy","page":"Client","title":"Ekztazy.CacheStrategy","text":"A method of handling cache insertion and eviction.\n\n\n\n\n\n","category":"type"},{"location":"client/#Ekztazy.CacheForever","page":"Client","title":"Ekztazy.CacheForever","text":"CacheForever() -> CacheForever\n\nStore everything and never evict items from the cache.\n\n\n\n\n\n","category":"type"},{"location":"client/#Ekztazy.CacheNever","page":"Client","title":"Ekztazy.CacheNever","text":"CacheNever() -> CacheNever\n\nDon't store anything in the cache.\n\n\n\n\n\n","category":"type"},{"location":"client/#Ekztazy.CacheTTL","page":"Client","title":"Ekztazy.CacheTTL","text":"CacheTTL(ttl::Period) -> CacheTTL\n\nEvict items from the cache after ttl has elapsed.\n\n\n\n\n\n","category":"type"},{"location":"client/#Ekztazy.CacheLRU","page":"Client","title":"Ekztazy.CacheLRU","text":"CacheLRU(size::Int) -> CacheLRU\n\nEvict the least recently used item from the cache when there are more than size items.\n\n\n\n\n\n","category":"type"},{"location":"client/#Ekztazy.CacheFilter","page":"Client","title":"Ekztazy.CacheFilter","text":"CacheFilter(f::Function) -> CacheFilter\n\nOnly store value v at key k if f(v) === true (k is always v.id).\n\n\n\n\n\n","category":"type"},{"location":"events/","page":"Handlers","title":"Handlers","text":"CurrentModule = Ekztazy","category":"page"},{"location":"events/#Events","page":"Handlers","title":"Events","text":"","category":"section"},{"location":"events/","page":"Handlers","title":"Handlers","text":"Events are how Discord communicates and interacts with our application. In Ekztazy.jl, we use the Handler type in conjunction with the Context type to handle them.","category":"page"},{"location":"events/#Handler","page":"Handlers","title":"Handler","text":"","category":"section"},{"location":"events/","page":"Handlers","title":"Handlers","text":"A Handler is simple to register for an event. To register a handler for the Ready event:","category":"page"},{"location":"events/","page":"Handlers","title":"Handlers","text":"# `c` is a client generated previously.\nh = OnReady() do (ctx)\n    println(\"I'm ready!\")\nend\n\nadd_handler!(c, h)","category":"page"},{"location":"events/","page":"Handlers","title":"Handlers","text":"Note that as OnReady is a common event, there is a convenience method for it. As such the following code is fully equivalent:","category":"page"},{"location":"events/","page":"Handlers","title":"Handlers","text":"on_ready!(c) do (ctx)\n    println(\"I'm ready!\")\nend","category":"page"},{"location":"events/","page":"Handlers","title":"Handlers","text":"(on_ready! creates an OnReady handler and adds it to the client.) You can find a list of all gateway events here. Simply add On before their NAME to get the name of the associated handler!","category":"page"},{"location":"events/","page":"Handlers","title":"Handlers","text":"Handler","category":"page"},{"location":"events/#Ekztazy.Handler","page":"Handlers","title":"Ekztazy.Handler","text":"Handler(\n    f::Function\n    d::Dict{Symbol, Any}\n)\n\nHandler is a wrapper for a Dict{Symbol, Any} that also contains a function.\n\n\n\n\n\n","category":"type"},{"location":"events/#Context","page":"Handlers","title":"Context","text":"","category":"section"},{"location":"events/","page":"Handlers","title":"Handlers","text":"The context is simply the payload received from the interaction. Exceptions: ","category":"page"},{"location":"events/","page":"Handlers","title":"Handlers","text":"The MessageCreate context contains a Message.\nThe OnGuildCreate and OnGuildUpdate contexts contain a Guild.\nThe OnInteractionCreate context contains an Interaction.","category":"page"},{"location":"events/","page":"Handlers","title":"Handlers","text":"You can find the expected payloads for events here.","category":"page"},{"location":"events/","page":"Handlers","title":"Handlers","text":"Context","category":"page"},{"location":"events/#Ekztazy.Context","page":"Handlers","title":"Ekztazy.Context","text":"Context(\n    data::Dict{Symbol, Any}\n)\n\nContext is a wrapper for a Dict{Symbol, Any} with some special functionality.\n\n\n\n\n\n","category":"type"},{"location":"events/#Special-Handlers","page":"Handlers","title":"Special Handlers","text":"","category":"section"},{"location":"events/","page":"Handlers","title":"Handlers","text":"on_message!\non_ready!\ncommand!","category":"page"},{"location":"events/#Ekztazy.on_message!","page":"Handlers","title":"Ekztazy.on_message!","text":"on_message!(\n    f::Function\n    c::Client\n)\n\nAdds a handler for the MESSAGE_CREATE gateway event. The f parameter's signature should be:\n\n    (ctx::Context) -> Any \n\n\n\n\n\n","category":"function"},{"location":"events/#Ekztazy.on_ready!","page":"Handlers","title":"Ekztazy.on_ready!","text":"on_ready!(\n    f::Function\n    c::Client\n)\n\nAdds a handler for the READY gateway event. The f parameter signature should be:\n\n    (ctx::Context) -> Any \n\n\n\n\n\n","category":"function"},{"location":"events/#Ekztazy.command!","page":"Handlers","title":"Ekztazy.command!","text":"command!(\n    f::Function\n    c::Client\n    name::AbstractString\n    description::AbstractString;\n    kwargs...\n)\n\nAdds a handler for INTERACTION CREATE gateway events where the InteractionData's name field matches name. Adds this command to c.commands or c.guild_commands based on the presence of guild. The f parameter signature should be:\n\n    (ctx::Context, args...) -> Any \n\nWhere args is a list of all the Command Options\n\nFor example a command that takes a user u and a number n as input should have this signature:\n\n(ctx::Context, u::User, n::Int) -> Any\n\nand the arguments would automatically get converted.\n\nNote: The argument names must match the Option names. The arguments can be ordered in any way. If no type is specified, no conversion will be performed, so Discord objects will be Snowflakes.\n\n\n\n\n\n","category":"function"},{"location":"rest/","page":"REST API","title":"REST API","text":"CurrentModule = Ekztazy","category":"page"},{"location":"rest/#REST-API","page":"REST API","title":"REST API","text":"","category":"section"},{"location":"rest/#Response","page":"REST API","title":"Response","text":"","category":"section"},{"location":"rest/","page":"REST API","title":"REST API","text":"Response\nfetchval","category":"page"},{"location":"rest/#Ekztazy.Response","page":"REST API","title":"Ekztazy.Response","text":"A wrapper around a response from the REST API. Every function which wraps a Discord REST API endpoint returns a Future which will contain a value of this type. To retrieve the Response from the Future, use fetch. See also: fetchval.\n\nFields\n\nval::Nullable{T}: The object contained in the HTTP response. For example, for a call to get_channel_message, this value will be a Message.\nok::Bool: The state of the request. If true, then it is safe to access val.\nhttp_response::Nullable{HTTP.Messages.Response}: The underlying HTTP response, if a request was made.\nexception::Nullable{Exception}: The caught exception, if one is thrown.\n\nExamples\n\nMultiple API calls which immediately return Futures and can be awaited:\n\nfutures = map(i -> create_message(c, channel_id; content=string(i)), 1:10);\nother_work_here()\nresps = fetch.(futures)\n\nSkipping error checks and returning the value directly:\n\nguild = fetchval(create_guild(c; name=\"foo\"))\n\n\n\n\n\n","category":"type"},{"location":"rest/#Ekztazy.fetchval","page":"REST API","title":"Ekztazy.fetchval","text":"fetchval(f::Future{Response{T}}) -> Nullable{T}\n\nShortcut for fetch(f).val: Fetch a Response and return its value. Note that there are no guarantees about the response's success and the value being returned, and it discards context that can be useful for debugging, such as HTTP responses and caught exceptions.\n\n\n\n\n\n","category":"function"},{"location":"rest/#CRUD-API","page":"REST API","title":"CRUD API","text":"","category":"section"},{"location":"rest/","page":"REST API","title":"REST API","text":"On top of functions for accessing individual endpoints such as get_channel_messages, Ekztazy.jl also offers a unified API with just four functions. Named after the CRUD model, they cover most of the Discord REST API and allow you to write concise, expressive code, and forget about the subtleties of endpoint naming. The argument ordering convention is roughly as follows:","category":"page"},{"location":"rest/","page":"REST API","title":"REST API","text":"A Client, always.\nFor cases when we don't yet have the entity to be manipulated (usually create and retrieve), the entity's type. If we do have the entity (update and delete), the entity itself.\nThe remaining positional arguments supply whatever context is needed to specify the entity. For example, sending a message requires a DiscordChannel parameter.\nKeyword arguments follow (usually for create and update).","category":"page"},{"location":"rest/","page":"REST API","title":"REST API","text":"create\nretrieve\nupdate\ndelete\nobtain","category":"page"},{"location":"rest/#Ekztazy.create","page":"REST API","title":"Ekztazy.create","text":"create(c::Client, ::Type{T}, args...; kwargs...) -> Future{Response}\n\nCreate, add, send, etc.\n\nExamples\n\nSending a Message:\n\ncreate(c, Message, channel; content=\"foo\")\n\nCreating a new DiscordChannel:\n\ncreate(c, DiscordChannel, guild; name=\"bar\")\n\nBanning a Member:\n\ncreate(c, Ban, guild, member; reason=\"baz\")\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.retrieve","page":"REST API","title":"Ekztazy.retrieve","text":"retrieve(c::Client, ::Type{T}, args...; kwargs...) -> Future{Response{T}}\n\nRetrieve, get, list, etc.\n\nExamples\n\nGetting the Client's User:\n\nretrieve(c, User)\n\nGetting a Guild's DiscordChannels:\n\nretrieve(c, DiscordChannel, guild)\n\nGetting an Invite to a Guild by code:\n\nretrieve(c, Invite, \"abcdef\")\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.update","page":"REST API","title":"Ekztazy.update","text":"update(c::Client, x::T, args...; kwargs...) -> Future{Response}\n\nUpdate, edit, modify, etc.\n\nExamples\n\nEditing a Message:\n\nupdate(c, message; content=\"foo2\")\n\nModifying a Webhook:\n\nupdate(c, webhook; name=\"bar2\")\n\nUpdating a Role:\n\nupdate(c, role, guild; permissions=8)\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.delete","page":"REST API","title":"Ekztazy.delete","text":"delete(c::Client, x::T, args...) -> Future{Response}\n\nDelete, remove, discard, etc.\n\nExamples\n\nKicking a Member:\n\ndelete(c, member)\n\nUnbanning a Member:\n\ndelete(c, ban, guild)\n\nDeleting all Reactions from a Message (note: this is the only update/delete method which takes a type parameter):\n\ndelete(c, Reaction, message)\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.obtain","page":"REST API","title":"Ekztazy.obtain","text":"obtain(c::Client, ::Type{T}, args...; kwargs...) -> T\n\nEquivalent to retrieve, but blocks and returns the object of type T\n\n\n\n\n\n","category":"function"},{"location":"rest/","page":"REST API","title":"REST API","text":"The full list of types available to be manipulated is:","category":"page"},{"location":"rest/","page":"REST API","title":"REST API","text":"AuditLog\nApplicationCommand\nBan\nDiscordChannel\nEmoji\nGuildEmbed\nGuild\nIntegration\nInvite\nMember\nMessage\nOverwrite\nReaction\nRole\nUser\nVoiceRegion\nWebhook","category":"page"},{"location":"rest/#Endpoints","page":"REST API","title":"Endpoints","text":"","category":"section"},{"location":"rest/","page":"REST API","title":"REST API","text":"Functions which wrap REST API endpoints are named and sorted according to the Discord API documentation. When a function accepts keyword arguments, the docstring will include a link to the Discord documentation which indicates the expected keys and values. Remember that the return types annotated below are not the actual return types, but the types of Response that the returned Futures will yield.","category":"page"},{"location":"rest/#Audit-Log","page":"REST API","title":"Audit Log","text":"","category":"section"},{"location":"rest/","page":"REST API","title":"REST API","text":"get_guild_audit_log","category":"page"},{"location":"rest/#Ekztazy.get_guild_audit_log","page":"REST API","title":"Ekztazy.get_guild_audit_log","text":"get_guild_audit_log(c::Client, guild::Integer; kwargs...) -> AuditLog\n\nGet a Guild's AuditLog. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Channel","page":"REST API","title":"Channel","text":"","category":"section"},{"location":"rest/","page":"REST API","title":"REST API","text":"get_channel\nmodify_channel\ndelete_channel\nget_channel_messages\nget_channel_message\ncreate_message\ncreate_reaction\ndelete_own_reaction\ndelete_user_reaction\nget_reactions\ndelete_all_reactions\nedit_message\ndelete_message\nbulk_delete_messages\nedit_channel_permissions\nget_channel_invites\ncreate_channel_invite\ndelete_channel_permission\ntrigger_typing_indicator\nget_pinned_messages\nadd_pinned_channel_message\ndelete_pinned_channel_message","category":"page"},{"location":"rest/#Ekztazy.get_channel","page":"REST API","title":"Ekztazy.get_channel","text":"get_channel(c::Client, channel::Integer) -> DiscordChannel\n\nGet a DiscordChannel.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.modify_channel","page":"REST API","title":"Ekztazy.modify_channel","text":"modify_channel(c::Client, channel::Integer; kwargs...) -> DiscordChannel\n\nModify a DiscordChannel. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.delete_channel","page":"REST API","title":"Ekztazy.delete_channel","text":"delete_channel(c::Client, channel::Integer) -> DiscordChannel\n\nDelete a DiscordChannel.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_channel_messages","page":"REST API","title":"Ekztazy.get_channel_messages","text":"get_channel_messages(c::Client, channel::Integer; kwargs...) -> Vector{Message}\n\nGet a list of Messages from a DiscordChannel. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_channel_message","page":"REST API","title":"Ekztazy.get_channel_message","text":"get_channel_message(c::Client, channel::Integer, message::Integer) -> Message\n\nGet a Message from a DiscordChannel.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.create_message","page":"REST API","title":"Ekztazy.create_message","text":"create_message(c::Client, channel::Integer; kwargs...) -> Message\n\nSend a Message to a DiscordChannel. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.create_reaction","page":"REST API","title":"Ekztazy.create_reaction","text":"create_reaction(c::Client, channel::Integer, message::Integer, emoji::StringOrChar)\n\nReact to a Message. If emoji is a custom Emoji, it should be formatted \"name:id\".\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.delete_own_reaction","page":"REST API","title":"Ekztazy.delete_own_reaction","text":"delete_own_reaction(c::Client, channel::Integer, message::Integer, emoji::StringOrChar)\n\nDelete the Client user's reaction to a Message.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.delete_user_reaction","page":"REST API","title":"Ekztazy.delete_user_reaction","text":"delete_user_reaction(\n    c::Client,\n    channel::Integer,\n    message::Integer,\n    emoji::StringOrChar,\n    user::Integer,\n)\n\nDelete a User's reaction to a Message.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_reactions","page":"REST API","title":"Ekztazy.get_reactions","text":"get_reactions(\n    c::Client,\n    channel::Integer,\n    message::Integer,\n    emoji::StringOrChar,\n) -> Vector{User}\n\nGet the Users who reacted to a Message with an Emoji.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.delete_all_reactions","page":"REST API","title":"Ekztazy.delete_all_reactions","text":"delete_all_reactions(c::Client, channel::Integer, message::Integer)\n\nDelete all reactions from a Message.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.edit_message","page":"REST API","title":"Ekztazy.edit_message","text":"edit_message(c::Client, channel::Integer, message::Integer; kwargs...) -> Message\n\nEdit a Message. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.delete_message","page":"REST API","title":"Ekztazy.delete_message","text":"delete_message(c::Client, channel::Integer, message::Integer)\n\nDelete a Message.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.bulk_delete_messages","page":"REST API","title":"Ekztazy.bulk_delete_messages","text":"bulk_delete_messages(c::Client, channel::Integer; kwargs...)\n\nDelete multiple Messages. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.edit_channel_permissions","page":"REST API","title":"Ekztazy.edit_channel_permissions","text":"edit_channel_permissions(\n    c::Client,\n    channel::Integer,\n    overwrite::Integer;\n    kwargs...,\n)\n\nEdit permissions for a DiscordChannel. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_channel_invites","page":"REST API","title":"Ekztazy.get_channel_invites","text":"get_channel_invites(c::Client, channel::Integer) -> Vector{Invite}\n\nGet the Invites for a DiscordChannel.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.create_channel_invite","page":"REST API","title":"Ekztazy.create_channel_invite","text":"create_channel_invite(c::Client, channel::Integer; kwargs...) -> Invite\n\nCreate an Invite to a DiscordChannel. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.delete_channel_permission","page":"REST API","title":"Ekztazy.delete_channel_permission","text":"delete_channel_permission(c::Client, channel::Integer, overwrite::Integer)\n\nDelete an Overwrite from a DiscordChannel.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.trigger_typing_indicator","page":"REST API","title":"Ekztazy.trigger_typing_indicator","text":"trigger_typing_indicator(c::Client, channel::Integer)\n\nTrigger the typing indicator in a DiscordChannel.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_pinned_messages","page":"REST API","title":"Ekztazy.get_pinned_messages","text":"get_pinned_messages(c::Client, channel::Integer) -> Vector{Message}\n\nGet the pinned Messages in a DiscordChannel.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.add_pinned_channel_message","page":"REST API","title":"Ekztazy.add_pinned_channel_message","text":"add_pinned_channel_message(c::Client, channel::Integer, message::Integer)\n\nPin a Message in a DiscordChannel.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.delete_pinned_channel_message","page":"REST API","title":"Ekztazy.delete_pinned_channel_message","text":"delete_pinned_channel_message(c::Client, channel::Integer, message::Integer)\n\nUnpin a Message from a DiscordChannel.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Emoji","page":"REST API","title":"Emoji","text":"","category":"section"},{"location":"rest/","page":"REST API","title":"REST API","text":"list_guild_emojis\nget_guild_emoji\ncreate_guild_emoji\nmodify_guild_emoji\ndelete_guild_emoji","category":"page"},{"location":"rest/#Ekztazy.list_guild_emojis","page":"REST API","title":"Ekztazy.list_guild_emojis","text":"list_guild_emojis(c::Client, guild::Integer) -> Vector{Emoji}\n\nGet the Emojis in a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_guild_emoji","page":"REST API","title":"Ekztazy.get_guild_emoji","text":"get_guild_emoji(c::Client, guild::Integer, emoji::Integer) -> Emoji\n\nGet an Emoji in a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.create_guild_emoji","page":"REST API","title":"Ekztazy.create_guild_emoji","text":"create_guild_emoji(c::Client, guild::Integer; kwargs...) -> Emoji\n\nCreate an Emoji in a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.modify_guild_emoji","page":"REST API","title":"Ekztazy.modify_guild_emoji","text":"modify_guild_emoji(c::Client, guild::Integer, emoji::Integer; kwargs...) -> Emoji\n\nEdit an Emoji in a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.delete_guild_emoji","page":"REST API","title":"Ekztazy.delete_guild_emoji","text":"delete_guild_emoji(c::Client, guild::Integer, emoji::Integer)\n\nDelete an Emoji from a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Guild","page":"REST API","title":"Guild","text":"","category":"section"},{"location":"rest/","page":"REST API","title":"REST API","text":"create_guild\nget_guild\nmodify_guild\ndelete_guild\nget_guild_channels\ncreate_guild_channel\nmodify_guild_channel_positions\nget_guild_member\nlist_guild_members\nadd_guild_member\nmodify_guild_member\nmodify_current_user_nick\nadd_guild_member_role\nremove_guild_member_role\nremove_guild_member\nget_guild_bans\nget_guild_ban\ncreate_guild_ban\nremove_guild_ban\nget_guild_roles\ncreate_guild_role\nmodify_guild_role_positions\nmodify_guild_role\ndelete_guild_role\nget_guild_prune_count\nbegin_guild_prune\nget_guild_voice_regions\nget_guild_invites\nget_guild_integrations\ncreate_guild_integration\nmodify_guild_integration\ndelete_guild_integration\nsync_guild_integration\nget_guild_embed\nmodify_guild_embed\nget_vanity_url\nget_guild_widget_image","category":"page"},{"location":"rest/#Ekztazy.create_guild","page":"REST API","title":"Ekztazy.create_guild","text":"create_guild(c::Client; kwargs...) -> Guild\n\nCreate a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_guild","page":"REST API","title":"Ekztazy.get_guild","text":"get_guild(c::Client, guild::Integer) -> Guild\n\nGet a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.modify_guild","page":"REST API","title":"Ekztazy.modify_guild","text":"modify_guild(c::Client, guild::Integer; kwargs...) -> Guild\n\nEdit a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.delete_guild","page":"REST API","title":"Ekztazy.delete_guild","text":"delete_guild(c::Client, guild::Integer)\n\nDelete a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_guild_channels","page":"REST API","title":"Ekztazy.get_guild_channels","text":"get_guild_channels(c::Client, guild::Integer) -> Vector{DiscordChannel}\n\nGet the DiscordChannels in a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.create_guild_channel","page":"REST API","title":"Ekztazy.create_guild_channel","text":"create_guild_channel(c::Client, guild::Integer; kwargs...) -> DiscordChannel\n\nCreate a DiscordChannel in a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.modify_guild_channel_positions","page":"REST API","title":"Ekztazy.modify_guild_channel_positions","text":"modify_guild_channel_positions(c::Client, guild::Integer, positions...)\n\nModify the positions of DiscordChannels in a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_guild_member","page":"REST API","title":"Ekztazy.get_guild_member","text":"get_guild_member(c::Client, guild::Integer, user::Integer) -> Member\n\nGet a Member in a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.list_guild_members","page":"REST API","title":"Ekztazy.list_guild_members","text":"list_guild_members(c::Client, guild::Integer; kwargs...) -> Vector{Member}\n\nGet a list of Members in a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.add_guild_member","page":"REST API","title":"Ekztazy.add_guild_member","text":"add_guild_member(c::Client; kwargs...) -> Member\n\nAdd a User to a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.modify_guild_member","page":"REST API","title":"Ekztazy.modify_guild_member","text":"modify_guild__member(c::Client, guild::Integer, user::Integer; kwargs...)\n\nModify a Member in a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.modify_current_user_nick","page":"REST API","title":"Ekztazy.modify_current_user_nick","text":"modify_current_user_nick(c::Client, guild::Intger; kwargs...) -> String\n\nModify the Client user's nickname in a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.add_guild_member_role","page":"REST API","title":"Ekztazy.add_guild_member_role","text":"add_guild_member_role(c::Client, guild::Integer, user::Integer, role::Integer)\n\nAdd a Role to a Member.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.remove_guild_member_role","page":"REST API","title":"Ekztazy.remove_guild_member_role","text":"remove_guild_member_role(c::Client, guild::Integer, user::Integer, role::Integer)\n\nRemove a Role from a Member.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.remove_guild_member","page":"REST API","title":"Ekztazy.remove_guild_member","text":"remove_guild_member(c::Client, guild::Integer, user::Integer)\n\nKick a Member from a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_guild_bans","page":"REST API","title":"Ekztazy.get_guild_bans","text":"get_guild_bans(c::Client, guild::Integer) -> Vector{Ban}\n\nGet a list of Bans in a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_guild_ban","page":"REST API","title":"Ekztazy.get_guild_ban","text":"get_ban(c::Client, guild::Integer,  user::Integer) -> Ban\n\nGet a Ban in a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.create_guild_ban","page":"REST API","title":"Ekztazy.create_guild_ban","text":"create_guild_ban(c::Client, guild::Integer, user::Integer; kwargs...)\n\nBan a Member from a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.remove_guild_ban","page":"REST API","title":"Ekztazy.remove_guild_ban","text":"remove_guild_ban(c::Client, guild::Integer, user::Integer)\n\nUnban a User from a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_guild_roles","page":"REST API","title":"Ekztazy.get_guild_roles","text":"get_guild_roles(c::Client, guild::Integer) -> Vector{Role}\n\nGet a Guild's Roles.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.create_guild_role","page":"REST API","title":"Ekztazy.create_guild_role","text":"create_guild_role(c::Client, guild::Integer; kwargs) -> Role\n\nCreate a Role in a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.modify_guild_role_positions","page":"REST API","title":"Ekztazy.modify_guild_role_positions","text":"modify_guild_role_positions(c::Client, guild::Integer, positions...) -> Vector{Role}\n\nModify the positions of Roles in a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.modify_guild_role","page":"REST API","title":"Ekztazy.modify_guild_role","text":"modify_guild_role(c::Client, guild::Integer, role::Integer; kwargs) -> Role\n\nModify a Role in a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.delete_guild_role","page":"REST API","title":"Ekztazy.delete_guild_role","text":"delete_guild_role(c::Client, guild::Integer, role::Integer)\n\nDelete a Role from a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_guild_prune_count","page":"REST API","title":"Ekztazy.get_guild_prune_count","text":"get_guild_prune_count(c::Client, guild::Integer; kwargs...) -> Dict\n\nGet the number of Members that would be removed from a Guild in a prune. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.begin_guild_prune","page":"REST API","title":"Ekztazy.begin_guild_prune","text":"begin_guild_prune(c::Client, guild::Integer; kwargs...) -> Dict\n\nBegin pruning Members from a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_guild_voice_regions","page":"REST API","title":"Ekztazy.get_guild_voice_regions","text":"get_guild_voice_regions(c::Client, guild::Integer) -> Vector{VoiceRegion}\n\nGet a list of VoiceRegions for the Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_guild_invites","page":"REST API","title":"Ekztazy.get_guild_invites","text":"get_guild_invites(c::Client, guild::Integer) -> Vector{Invite}\n\nGet a list of Invites to a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_guild_integrations","page":"REST API","title":"Ekztazy.get_guild_integrations","text":"get_guild_integrations(c::Client, guild::Integer) -> Vector{Integration}\n\nGet a list of Integrations for a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.create_guild_integration","page":"REST API","title":"Ekztazy.create_guild_integration","text":"create_guild_integration(c::Client, guild::Integer; kwargs...)\n\nCreate/attach an Integration to a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.modify_guild_integration","page":"REST API","title":"Ekztazy.modify_guild_integration","text":"modify_guild_integration(c::Client, guild::Integer, integration::Integer; kwargs...)\n\nModify an Integration in a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.delete_guild_integration","page":"REST API","title":"Ekztazy.delete_guild_integration","text":"delete_guild_integration(c::Client, guild::Integer, integration::Integer)\n\nDelete an Integration from a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.sync_guild_integration","page":"REST API","title":"Ekztazy.sync_guild_integration","text":"sync_guild_integration(c::Client, guild::Integer, integration::Integer)\n\nSync an Integration in a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_guild_embed","page":"REST API","title":"Ekztazy.get_guild_embed","text":"get_guild_embed(c::Client, guild::Integer) -> GuildEmbed\n\nGet a Guild's GuildEmbed.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.modify_guild_embed","page":"REST API","title":"Ekztazy.modify_guild_embed","text":"modify_guild_embed(c::Client, guild::Integer; kwargs...) -> GuildEmbed\n\nModify a Guild's GuildEmbed. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_vanity_url","page":"REST API","title":"Ekztazy.get_vanity_url","text":"get_vanity_url(c::Client, guild::Integer) -> Invite\n\nGet a Guild's vanity URL, if it supports that feature.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_guild_widget_image","page":"REST API","title":"Ekztazy.get_guild_widget_image","text":"get_guild_widget_image(c::Client, guild::Integer; kwargs...) -> Vector{UInt8}\n\nGet a Guild's widget image in PNG format. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Invite","page":"REST API","title":"Invite","text":"","category":"section"},{"location":"rest/","page":"REST API","title":"REST API","text":"get_invite\ndelete_invite","category":"page"},{"location":"rest/#Ekztazy.get_invite","page":"REST API","title":"Ekztazy.get_invite","text":"get_invite(c::Client, invite::AbstractString; kwargs...} -> Invite\n\nGet an Invite to a Guild. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.delete_invite","page":"REST API","title":"Ekztazy.delete_invite","text":"delete_invite(c::Client, invite::AbstractString) -> Invite\n\nDelete an Invite to a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#User","page":"REST API","title":"User","text":"","category":"section"},{"location":"rest/","page":"REST API","title":"REST API","text":"get_current_user\nget_user\nmodify_current_user\nget_current_user_guilds\nleave_guild\ncreate_dm","category":"page"},{"location":"rest/#Ekztazy.get_current_user","page":"REST API","title":"Ekztazy.get_current_user","text":"get_current_user(c::Client) -> User\n\nGet the Client User.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_user","page":"REST API","title":"Ekztazy.get_user","text":"get_user(c::Client, user::Integer) -> User\n\nGet a User.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.modify_current_user","page":"REST API","title":"Ekztazy.modify_current_user","text":"modify_current_user(c::Client; kwargs...) -> User\n\nModify the Client User. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_current_user_guilds","page":"REST API","title":"Ekztazy.get_current_user_guilds","text":"get_user_guilds(c::Client; kwargs...) -> Vector{Guild}\n\nGet a list of Guilds the Client User is a member of. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.leave_guild","page":"REST API","title":"Ekztazy.leave_guild","text":"leave_guild(c::Client, guild::Integer)\n\nLeave a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.create_dm","page":"REST API","title":"Ekztazy.create_dm","text":"create_dm(c::Client; kwargs...) -> DiscordChannel\n\nCreate a DM DiscordChannel. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Voice","page":"REST API","title":"Voice","text":"","category":"section"},{"location":"rest/","page":"REST API","title":"REST API","text":"list_voice_regions","category":"page"},{"location":"rest/#Ekztazy.list_voice_regions","page":"REST API","title":"Ekztazy.list_voice_regions","text":"list_voice_regions(c::Client) -> Vector{VoiceRegion}\n\nGet a list of the VoiceRegions that can be used when creating Guilds.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Webhook","page":"REST API","title":"Webhook","text":"","category":"section"},{"location":"rest/","page":"REST API","title":"REST API","text":"create_webhook\nget_channel_webhooks\nget_guild_webhooks\nget_webhook\nget_webhook_with_token\nmodify_webhook\nmodify_webhook_with_token\ndelete_webhook\ndelete_webhook_with_token\nexecute_webhook\nexecute_slack_compatible_webhook\nexecute_github_compatible_webhook","category":"page"},{"location":"rest/#Ekztazy.create_webhook","page":"REST API","title":"Ekztazy.create_webhook","text":"create_webhook(c::Client, channel::Integer; kwargs...) -> Webhook\n\nCreate a Webhook in a DiscordChannel. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_channel_webhooks","page":"REST API","title":"Ekztazy.get_channel_webhooks","text":"get_channel_webhooks(c::Client, channel::Integer) -> Vector{Webhook}\n\nGet a list of Webhooks in a DiscordChannel.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_guild_webhooks","page":"REST API","title":"Ekztazy.get_guild_webhooks","text":"get_guild_webhooks(c::Client, guild::Integer) -> Vector{Webhook}\n\nGet a list of Webhooks in a Guild.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_webhook","page":"REST API","title":"Ekztazy.get_webhook","text":"get_webhook(c::Client, webhook::Integer) -> Webhook\n\nGet a Webhook.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.get_webhook_with_token","page":"REST API","title":"Ekztazy.get_webhook_with_token","text":"get_webhook_with_token(c::Client, webhook::Integer, token::AbstractString) -> Webhook\n\nGet a Webhook with a token.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.modify_webhook","page":"REST API","title":"Ekztazy.modify_webhook","text":"modify_webhook(c::Client, webhook::Integer; kwargs...) -> Webhook\n\nModify a Webhook. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.modify_webhook_with_token","page":"REST API","title":"Ekztazy.modify_webhook_with_token","text":"modify_webhook_with_token(\n    c::Client,\n    webhook::Integer,\n    token::AbstractString;\n    kwargs...,\n) -> Webhook\n\nModify a Webhook with a token. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.delete_webhook","page":"REST API","title":"Ekztazy.delete_webhook","text":"delete_webhook(c::Client, webhook::Integer)\n\nDelete a Webhook.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.delete_webhook_with_token","page":"REST API","title":"Ekztazy.delete_webhook_with_token","text":"delete_webhook_with_token(c::Client, webhook::Integer, token::AbstractString)\n\nDelete a Webhook with a token.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.execute_webhook","page":"REST API","title":"Ekztazy.execute_webhook","text":"execute_webhook(\n    c::Client,\n    webhook::Integer,\n    token::AbstractString;\n    wait::Bool=false,\n    kwargs...,\n) -> Message\n\nExecute a Webhook. If wait is not set, no Message is returned. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.execute_slack_compatible_webhook","page":"REST API","title":"Ekztazy.execute_slack_compatible_webhook","text":"execute_slack_compatible_webhook(\n    c::Client,\n    webhook::Integer,\n    token::AbstractString;\n    wait::Bool=true,\n    kwargs...,\n)\n\nExecute a Slack Webhook. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Ekztazy.execute_github_compatible_webhook","page":"REST API","title":"Ekztazy.execute_github_compatible_webhook","text":"execute_github_compatible_webhook(\n    c::Client,\n    webhook::Integer,\n    token::AbstractString;\n    wait::Bool=true,\n    kwargs...,\n)\n\nExecute a Github Webhook. More details here.\n\n\n\n\n\n","category":"function"},{"location":"rest/#Interaction","page":"REST API","title":"Interaction","text":"","category":"section"},{"location":"rest/","page":"REST API","title":"REST API","text":"create_application_command\nget_application_commands\nrespond_to_interaction\ncreate_followup_message\nack_interaction\nbulk_overwrite_application_commands","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Ekztazy","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to Ekztazy.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Ekztazy.jl is the spiritual successor to Discord.jl. It is a maintained Julia Pkg for creating simple yet efficient Discord bots.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Strong, expressive type system: No fast-and-loose JSON objects here.\nNon-blocking: API calls return immediately and can be awaited when necessary.\nSimple: Multiple dispatch allows for a small, elegant core API.\nFast: Julia is fast like C but still easy like Python.\nRobust: Resistant to bad event handlers and/or requests. Errors are introspectible for debugging.\nLightweight: Cache what is important but shed dead weight with TTL.\nGateway independent: Ability to interact with Discord's API without establishing a gateway connection.\nDistributed: Process-based sharding requires next to no intervention and you can even run shards on separate machines.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can add Ekztazy.jl from Git using the following command in the REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add https://github.com/Humans-of-Julia/Ekztazy.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"The most important type when working with Ekztazy.jl is the Client.  Most applications will start in a similar fashion to this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Ekztazy\n\nclient = Client()","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will create a Client using default parameters. This expects two environment variables:","category":"page"},{"location":"","page":"Home","title":"Home","text":"APPLICATION_ID, the bot's application id\nDISCORD_TOKEN, the bot's secret token","category":"page"},{"location":"","page":"Home","title":"Home","text":"These can also be specified.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Ekztazy\n\nclient = Client(\n    discord_token,\n    application_id,\n    intents(GUILDS, GUILD_MESSAGES)\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Assuming discord_token is a String and applicaton_id is an Int). For a more complete list of parameters for creating a Client. Check the Client documentation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Usually when working with Ekztazy, we will either want to handle messages, or commands. Let's start with messages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"# ... \n\non_message!(client) do (ctx) \n    if ctx.message.author.id != me(client).id\n        reply(client, ctx, content=\"I received the following message: $(ctx.message.content).\")\n    end\nend\n\nstart(client)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let's analyze this code. First we are using the on_message! function which generates adds a Handler. (For more information on this, check the events documentation). Then in the handling function we start by checking if the the message author's id isn't the same as the the bot's. This is sensible, as we wouldn't want the bot to indefinitely respond to itself. Finally, we use the reply function to reply to the message! Under the hood, the reply function appraises the context, and finds a way to reply to it, the kwargs passed to it are then made into the request body. Here, in the message we use interpolation to send the message's content. We finish by calling start on the client.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Next, commands.","category":"page"},{"location":"","page":"Home","title":"Home","text":"# ...\ng = ENV[\"MY_TESTING_GUILD\"]\n\ncommand!(client, g, \"double\", \"Doubles a number!\", options=[opt(name=\"number\", description=\"The number to double!\")]) do (ctx) \n    Ekztazy.reply(client, ctx, content=\"$(parse(Int, opt(ctx)[\"number\"])*2)\")\nend\n\nstart(client)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let's analyze this code again. First we are using the command! function. This creates a command with the specified parameters. We are also uisng the helper opt method, to generate and get options. Calling opt with a name and description will create an option, using it on a context will get the values the user provided for each option in a Dict. Like in the previous example we are using the magic reply function that creates a followup message for the interaction. (This does not strictly reply to the interaction. Interactions instantly get ACKd by Ekztazy.jl to prevent your handling implementation from exceeding the interaction's 3s reply time limit.)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here is the equivalent using the new system. The old system is deprecated and will be removed in the next major version.","category":"page"},{"location":"","page":"Home","title":"Home","text":"# ...\ng = ENV[\"MY_TESTING_GUILD\"]\n\ncommand!(client, g, \"double\", \"Doubles a number!\", legacy=false, options=Options(\n    [Int, \"num\", \"The number to double!\"]\n) do ctx, num::Int\n    reply(client, ctx, content=\"$(num*2)\")\nend\n\nstart(client)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The option num will magically be passed to the handler to be used directly.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Sometimes we may also want to do things without waiting for user input. However putting such code in the top scope would never be executed as start is blocking. This is where on_ready! comes in.","category":"page"},{"location":"","page":"Home","title":"Home","text":"# ...\n\nCHID = 776251117616234509 # Testing channel ID\non_ready!(client) do (ctx)\n    cm = component!(client, \"ar00\"; type=2, style=1, label=\"Really??\") do (ctx)\n        Ekztazy.reply(client, ctx, content=\"Yes!\")\n    end\n    create_message(client, CHID, content=\"I am ready!\", components=[Ekztazy.Component(type=1, components=[cm])])\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let's get right into it. First we are using the on_ready!. This is called as soon as the bot is ready. We are then creating a Component and a handler for it. The component's handler simply replies with \"Yes!\", as usual using the reply function. Next we have a new function, create_message. This simply sends message to the specificed channel id. Here the message content is simply \"I am ready\". It also has a component. The component we created previously is of type 2, it's a button. It cannot be sent directly and needs to be wrapped in an action row of type 1, this is what we do by creating a new Component of type 1.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is all you should need for most Discord bot projects! For any question please join the Humans of Julia Discord, and look for me @Kyando#0001!","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"CurrentModule = Ekztazy","category":"page"},{"location":"helpers/#Helpers","page":"Helpers","title":"Helpers","text":"","category":"section"},{"location":"helpers/","page":"Helpers","title":"Helpers","text":"STYLES\nPermission\nhas_permission\npermissions_in\nreply\nfilter_ranges\nsplit_message\nplaintext\nupload_file\nset_game\nopt\nOption\nextops\n@fetch\n@fetchval\n@deferred_fetch\n@deferred_fetchval","category":"page"},{"location":"helpers/#Ekztazy.STYLES","page":"Helpers","title":"Ekztazy.STYLES","text":"Regex expressions for split_message to not break Discord formatting.\n\n\n\n\n\n","category":"constant"},{"location":"helpers/#Ekztazy.Permission","page":"Helpers","title":"Ekztazy.Permission","text":"Bitwise permission flags. More details here.\n\n\n\n\n\n","category":"type"},{"location":"helpers/#Ekztazy.has_permission","page":"Helpers","title":"Ekztazy.has_permission","text":"has_permission(perms::Integer, perm::Permission) -> Bool\n\nDetermine whether a bitwise OR of permissions contains one Permission.\n\nExamples\n\njulia> has_permission(0x0420, PERM_VIEW_CHANNEL)\ntrue\n\njulia> has_permission(0x0420, PERM_ADMINISTRATOR)\nfalse\n\njulia> has_permission(0x0008, PERM_MANAGE_ROLES)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Ekztazy.permissions_in","page":"Helpers","title":"Ekztazy.permissions_in","text":"permissions_in(m::Member, g::Guild, ch::DiscordChannel) -> Int64\n\nCompute a Member's Permissions in a DiscordChannel.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Ekztazy.reply","page":"Helpers","title":"Ekztazy.reply","text":"reply(\n    c::Client\n    context;\n    kwargs...\n)\n\nReplies to a Context, an Interaction or a Message.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Ekztazy.filter_ranges","page":"Helpers","title":"Ekztazy.filter_ranges","text":"filter_ranges(u::Vector{UnitRange{Int}})\n\nFilter a list of ranges, discarding ranges included in other ranges from the list.\n\nExample\n\njulia> Ekztazy.filter_ranges([1:5, 3:8, 1:20, 2:16, 10:70, 25:60, 5:35, 50:90, 10:70])\n4-element Vector{UnitRange{Int64}}:\n 1:20\n 5:35\n 50:90\n 10:70\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Ekztazy.split_message","page":"Helpers","title":"Ekztazy.split_message","text":"split_message(text::AbstractString; chunk_limit::UInt=2000,\n              extrastyles::Vector{Regex}=Vector{Regex}(),\n              forcesplit::Bool = true) -> Vector{String}\n\nSplit a message into chunks with at most chunk_limit length, preserving formatting.\n\nThe chunk_limit has as default the 2000 character limit of Discord's messages, but can be changed to any nonnegative integer.\n\nFormatting is specified by STYLES) and can be aggregated with the extrastyles argument.\n\nDiscord limits messages to 2000, so the code forces split if format breaking cannot be avoided. If desired, however, this behavior can be lifter by setting forcesplit to false.\n\nExamples\n\n```jldoctest; setup=:(using Ekztazy) julia> split_message(\"foo\") 1-element Vector{String}:  \"foo\"\n\njulia> split_message(repeat('.', 1995) * \"hello, world\")[2] \"hello, world\"\n\njulia> splitmessage(\"hello, world\", chunklimit=10) 2-element Vector{String}:  \"hello,\"  \"world\"\n\njulia> splitmessage(\"hello, _beautiful world\", chunklimit=15) ┌ Warning: message was forced-split to fit the desired chunk length limit 15 └ @ Main REPL[66]:28 3-element Vector{String}:  \"hello,\"  \"beautiful wo\"  \"rld_\"\n\njulia> splitmessage(\"hello, _beautiful world\", chunklimit=15, forcesplit=false) ┌ Warning: message could not be split into chunks smaller than the length limit 15 └ @ Main REPL[66]:32 2-element Vector{String}:  \"hello,\"  \"beautiful world_\"\n\njulia> split_message(\"hello\n\n\", 12) 2-element Vector{String}:  \"hello ==\"  \"===\"\n\njulia> splitmessage(\"hello ≡≡≡≡≡ \", chunklimit=12, extrastyles = [r\" ≡+ \"]) 2-element Vector{String}:  \"hello\"  \"≡≡≡≡≡\"\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Ekztazy.plaintext","page":"Helpers","title":"Ekztazy.plaintext","text":"plaintext(m::Message) -> String\nplaintext(c::Client, m::Message) -> String\n\nGet the Message contents with any User mentions replaced with their plaintext. If a Client is provided, DiscordChannels Role are also replaced. However, only channels and roles stored in state are replaced; no API requests are made.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Ekztazy.upload_file","page":"Helpers","title":"Ekztazy.upload_file","text":"upload_file(c::Client, ch::DiscordChannel, path::AbstractString; kwargs...) -> Message\n\nSend a Message with a file Attachment. Any keywords are passed on to create_message.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Ekztazy.set_game","page":"Helpers","title":"Ekztazy.set_game","text":"set_game(\n    c::Client,\n    game::AbstractString;\n    type::Int=AT.GAME,\n    since::Nullable{Int}=c.presence[\"since\"],\n    status::Union{PresenceStatus, AbstractString}=c.presence[\"status\"],\n    afk::Bool=c.presence[\"afk\"],\n    kwargs...,\n) -> Bool\n\nShortcut for update_status to set the Client's Activity. Any additional keywords are passed into the activity section.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Ekztazy.opt","page":"Helpers","title":"Ekztazy.opt","text":"Deprecated, use Option instead\n\n\n\n\n\nopt(ctx::Context)\n\nHelper function that is equivalent to calling extops(ctx.interaction.data.options)\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Ekztazy.Option","page":"Helpers","title":"Ekztazy.Option","text":"Option(; kwargs...) -> ApplicationCommandOption\n\nHelper function that creates an ApplicationCommandOption`\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Ekztazy.extops","page":"Helpers","title":"Ekztazy.extops","text":"extops(ops::Vector)\n\nCreates a Dict of option name -> option value for the given vector of ApplicationCommandOption.  If the option is of Subcommand type, creates a dict for all its subcommands.\n\n\n\n\n\nReturn an empty Dict if the list of options used is missing.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Ekztazy.@fetch","page":"Helpers","title":"Ekztazy.@fetch","text":"@fetch [functions...] block\n\nWrap all calls to the specified CRUD functions (create, retrieve, update, and delete) with fetch inside a block. If no functions are specified, all CRUD functions are wrapped.\n\nExamples\n\nWrapping all CRUD functions:\n\n@fetch begin\n    guild_resp = create(c, Guild; name=\"foo\")\n    guild_resp.ok || error(\"Request for new guild failed\")\n    channel_resp = retrieve(c, DiscordChannel, guild_resp.val)\nend\n\nWrapping only calls to retrieve:\n\n@fetch retrieve begin\n    resp = retrieve(c, DiscordChannel, 123)\n    future = create(c, Message, resp.val; content=\"foo\")  # Behaves normally.\nend\n\n\n\n\n\n","category":"macro"},{"location":"helpers/#Ekztazy.@fetchval","page":"Helpers","title":"Ekztazy.@fetchval","text":"@fetchval [functions...] block\n\nIdentical to @fetch, but calls are wrapped with fetchval instead.\n\n\n\n\n\n","category":"macro"},{"location":"helpers/#Ekztazy.@deferred_fetch","page":"Helpers","title":"Ekztazy.@deferred_fetch","text":"@deferred_fetch [functions...] block\n\nIdentical to @fetch, but Futures are not fetched until the end of the block. This is more efficient, but only works when there are no data dependencies in the block.\n\nExamples\n\nThis will work:\n\n@deferred_fetch begin\n    guild_resp = create(c, Guild; name=\"foo\")\n    channel_resp = retrieve(c, DiscordChannel, 123)\nend\n\nThis will not, because the second call is dependent on the first value:\n\n@deferred_fetch begin\n    guild_resp = create(c, Guild; name=\"foo\")\n    channels_resp = retrieve(c, DiscordChannel, guild_resp.val)\nend\n\n\n\n\n\n","category":"macro"},{"location":"helpers/#Ekztazy.@deferred_fetchval","page":"Helpers","title":"Ekztazy.@deferred_fetchval","text":"@deferred_fetchval [functions...] block\n\nIdentical to @deferred_fetch, but Futures have fetchval called on them instead of fetch.\n\n\n\n\n\n","category":"macro"},{"location":"types/","page":"Types","title":"Types","text":"CurrentModule = Ekztazy","category":"page"},{"location":"types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Message\nAbstractGuild\nGuild\nActivity\nActivityTimestamps\nActivityParty\nActivityAssets\nActivitySecrets\nActivityType\nActivityFlags\nApplicationCommand\nApplicationCommandOption\nApplicationCommandChoice\nAttachment\nAuditLog\nAuditLogEntry\nAuditLogChange\nAuditLogOptions\nActionType\nBan\nDiscordChannel\nConnection\nComponent\nEmbed\nEmbedThumbnail\nEmbedVideo\nEmbedImage\nEmbedProvider\nEmbedAuthor\nEmbedFooter\nEmbedField\nEmoji\nUnavailableGuild\nVerificationLevel\nMessageNotificationLevel\nExplicitContentFilterLevel\nMFALevel\nGuildEmbed\nIntegration\nIntegrationAccount\nInteraction\nInteractionData\nInvite\nInviteMetadata\nMember\nMessageActivity\nMessageApplication\nMessageType\nMessageActivityType\nOverwrite\nPresence\nReaction\nRole\nSelectOption\nUser\nVoiceRegion\nVoiceState\nWebhook","category":"page"},{"location":"types/#Ekztazy.Message","page":"Types","title":"Ekztazy.Message","text":"A message sent to a DiscordChannel. More details here.\n\nFields\n\nid               :: Snowflake\nchannel_id       :: Snowflake\nguild_id         :: Optional{Snowflake}\nauthor           :: Optional{Ekztazy.User}\nmember           :: Optional{Ekztazy.Member}\ncontent          :: Optional{String}\ntimestamp        :: Optional{DateTime}\nedited_timestamp :: OptionalNullable{DateTime}\ntts              :: Optional{Bool}\nmention_everyone :: Optional{Bool}\nmentions         :: Optional{Vector{Ekztazy.User}}\nmention_roles    :: Optional{Vector{Snowflake}}\nattachments      :: Optional{Vector{Ekztazy.Attachment}}\nembeds           :: Optional{Vector{Ekztazy.Embed}}\nreactions        :: Optional{Vector{Ekztazy.Reaction}}\nnonce            :: OptionalNullable{Snowflake}\npinned           :: Optional{Bool}\nwebhook_id       :: Optional{Snowflake}\ntype             :: Optional{Int}\nactivity         :: Optional{Ekztazy.MessageActivity}\napplication      :: Optional{Ekztazy.MessageApplication}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.AbstractGuild","page":"Types","title":"Ekztazy.AbstractGuild","text":"A Discord guild (server). Can either be an UnavailableGuild or a Guild.\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.Guild","page":"Types","title":"Ekztazy.Guild","text":"A Discord guild (server). More details here.\n\nFields\n\nid                            :: Snowflake\nname                          :: String\nicon                          :: Nullable{String}\nsplash                        :: OptionalNullable{String}\nowner                         :: Optional{Bool}\nowner_id                      :: Optional{Snowflake}\npermissions                   :: Optional{String}\nregion                        :: Optional{String}\nafk_channel_id                :: OptionalNullable{Snowflake}\nafk_timeout                   :: Optional{Int}\nembed_enabled                 :: Optional{Bool}\nembed_channel_id              :: OptionalNullable{Snowflake}\nverification_level            :: Optional{Int}\ndefault_message_notifications :: Optional{Int}\nexplicit_content_filter       :: Optional{Int}\nroles                         :: Optional{Vector{Ekztazy.Role}}\nemojis                        :: Optional{Vector{Ekztazy.Emoji}}\nfeatures                      :: Optional{Vector{String}}\nmfa_level                     :: Optional{Int}\napplication_id                :: OptionalNullable{Snowflake}\nwidget_enabled                :: Optional{Bool}\nwidget_channel_id             :: OptionalNullable{Snowflake}\nsystem_channel_id             :: OptionalNullable{Snowflake}\njoined_at                     :: Optional{DateTime}\nlarge                         :: Optional{Bool}\nunavailable                   :: Optional{Bool}\nmember_count                  :: Optional{Int}\nmax_members                   :: Optional{Int}\nvoice_states                  :: Optional{Vector{Ekztazy.VoiceState}}\nmembers                       :: Optional{Vector{Ekztazy.Member}}\nchannels                      :: Optional{Vector{Ekztazy.DiscordChannel}}\npresences                     :: Optional{Vector{Ekztazy.Presence}}\nmax_presences                 :: OptionalNullable{Int}\nvanity_url_code               :: OptionalNullable{String}\ndescription                   :: OptionalNullable{String}\nbanner                        :: OptionalNullable{String}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.Activity","page":"Types","title":"Ekztazy.Activity","text":"A User activity. More details here.\n\nFields\n\nname           :: String\ntype           :: Int\nurl            :: OptionalNullable{String}\ntimestamps     :: Optional{Ekztazy.ActivityTimestamps}\napplication_id :: Optional{Snowflake}\ndetails        :: OptionalNullable{String}\nstate          :: OptionalNullable{String}\nemoji          :: OptionalNullable{Ekztazy.ActivityEmoji}\nparty          :: Optional{Ekztazy.ActivityParty}\nassets         :: Optional{Ekztazy.ActivityAssets}\nsecrets        :: Optional{Ekztazy.ActivitySecrets}\ninstance       :: Optional{Bool}\nflags          :: Optional{Int}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.ActivityTimestamps","page":"Types","title":"Ekztazy.ActivityTimestamps","text":"The start and stop times of an Activity. More details here.\n\nFields\n\nstart :: Optional{DateTime}\nstop  :: Optional{DateTime}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.ActivityParty","page":"Types","title":"Ekztazy.ActivityParty","text":"The current party of an Activity's player. More details here.\n\nFields\n\nid   :: Optional{String}\nsize :: Optional{Vector{Int}}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.ActivityAssets","page":"Types","title":"Ekztazy.ActivityAssets","text":"Images and hover text for an Activity. More details here.\n\nFields\n\nlarge_image :: Optional{String}\nlarge_text  :: Optional{String}\nsmall_image :: Optional{String}\nsmall_text  :: Optional{String}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.ActivitySecrets","page":"Types","title":"Ekztazy.ActivitySecrets","text":"Secrets for Rich Presence joining and spectating of an Activity. More details here.\n\nFields\n\njoin     :: Optional{String}\nspectate :: Optional{String}\nmatch    :: Optional{String}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.ActivityType","page":"Types","title":"Ekztazy.ActivityType","text":"An Activity's type. Available values are GAME, STREAMING, LISTENING, WATCHING, and COMPETING. More details here.\n\n\n\n\n\n","category":"module"},{"location":"types/#Ekztazy.ActivityFlags","page":"Types","title":"Ekztazy.ActivityFlags","text":"Flags which indicate what an Activity payload contains. More details here.\n\n\n\n\n\n","category":"module"},{"location":"types/#Ekztazy.ApplicationCommand","page":"Types","title":"Ekztazy.ApplicationCommand","text":"An Application Command. More details here.\n\nFields\n\nid                  :: OptionalNullable{Snowflake}\ntype                :: Optional{Int}\napplication_id      :: Snowflake\nguild_id            :: Optional{Snowflake}\nname                :: String\ndescription         :: String\noptions             :: Optional{Vector{Ekztazy.ApplicationCommandOption}}\ndefault_permissions :: Optional{Bool}\nversion             :: Optional{Snowflake}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.ApplicationCommandOption","page":"Types","title":"Ekztazy.ApplicationCommandOption","text":"Application Command Option. More details here.\n\nFields\n\nvalue         :: Any\ntype          :: Optional{Int}\nname          :: Optional{String}\ndescription   :: Optional{String}\nrequired      :: Optional{Bool}\nmin_value     :: Optional{Number}\nmax_value     :: Optional{Number}\nautocomplete  :: Optional{Bool}\nchoices       :: Optional{Vector{Ekztazy.ApplicationCommandChoice}}\noptions       :: Optional{Vector{Ekztazy.ApplicationCommandOption}}\nchannel_types :: Optional{Vector{Int}}\nfocused       :: Optional{Bool}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.ApplicationCommandChoice","page":"Types","title":"Ekztazy.ApplicationCommandChoice","text":"Application Command Choice. More details here.\n\nFields\n\nname  :: String\nvalue :: Union{Number, String}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.Attachment","page":"Types","title":"Ekztazy.Attachment","text":"A Message attachment. More details here.\n\nFields\n\nid        :: Snowflake\nfilename  :: String\nsize      :: Int\nurl       :: String\nproxy_url :: String\nheight    :: Optional{Int}\nwidth     :: Optional{Int}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.AuditLog","page":"Types","title":"Ekztazy.AuditLog","text":"An audit log. More details here.\n\nFields\n\nwebhooks          :: Vector{Ekztazy.Webhook}\nusers             :: Vector{Ekztazy.User}\naudit_log_entries :: Vector{Ekztazy.AuditLogEntry}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.AuditLogEntry","page":"Types","title":"Ekztazy.AuditLogEntry","text":"An entry in an AuditLog. More details here.\n\nFields\n\ntarget_id   :: Nullable{Snowflake}\nchanges     :: Optional{Vector{Ekztazy.AuditLogChange}}\nuser_id     :: Snowflake\nid          :: Snowflake\naction_type :: Int\noptions     :: Optional{Ekztazy.AuditLogOptions}\nreason      :: Optional{String}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.AuditLogChange","page":"Types","title":"Ekztazy.AuditLogChange","text":"A change item in an AuditLogEntry.\n\nThe first type parameter is the type of new_value and old_value. The second is the type of the entity that new_value and old_value belong(ed) to.\n\nMore details here.\n\nFields\n\nnew_value :: Optional{T} where T\nold_value :: Optional{T} where T\nkey       :: String\ntype      :: Type{U} where U\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.AuditLogOptions","page":"Types","title":"Ekztazy.AuditLogOptions","text":"Optional information in an AuditLogEntry. More details here.\n\nFields\n\ndelete_member_days :: Optional{Int}\nmembers_removed    :: Optional{Int}\nchannel_id         :: Optional{Snowflake}\ncount              :: Optional{Int}\nid                 :: Optional{Snowflake}\ntype               :: Optional{Int}\nrole_name          :: Optional{String}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.ActionType","page":"Types","title":"Ekztazy.ActionType","text":"AuditLog action types. More details here.\n\n\n\n\n\n","category":"module"},{"location":"types/#Ekztazy.Ban","page":"Types","title":"Ekztazy.Ban","text":"A User ban. More details here.\n\nFields\n\nreason :: Nullable{String}\nuser   :: Ekztazy.User\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.DiscordChannel","page":"Types","title":"Ekztazy.DiscordChannel","text":"A Discord channel. More details here.\n\nNote: The name Channel is already used, hence the prefix.\n\nFields\n\nid                    :: Snowflake\ntype                  :: Optional{Int}\nguild_id              :: Optional{Snowflake}\nposition              :: Optional{Int}\npermission_overwrites :: Optional{Vector{Ekztazy.Overwrite}}\nname                  :: Optional{String}\ntopic                 :: OptionalNullable{String}\nnsfw                  :: Optional{Bool}\nlast_message_id       :: OptionalNullable{Snowflake}\nbitrate               :: Optional{Int}\nuser_limit            :: Optional{Int}\nrate_limit_per_user   :: Optional{Int}\nrecipients            :: Optional{Vector{Ekztazy.User}}\nicon                  :: OptionalNullable{String}\nowner_id              :: Optional{Snowflake}\napplication_id        :: Optional{Snowflake}\nparent_id             :: OptionalNullable{Snowflake}\nlast_pin_timestamp    :: OptionalNullable{DateTime}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.Connection","page":"Types","title":"Ekztazy.Connection","text":"A User connection to an external service (Twitch, YouTube, etc.). More details here.\n\nFields\n\nid           :: String\nname         :: String\ntype         :: String\nrevoked      :: Bool\nintegrations :: Vector{Ekztazy.Integration}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.Component","page":"Types","title":"Ekztazy.Component","text":"An interactable component. More details here.\n\nFields\n\ntype        :: Int\ncustom_id   :: Optional{String}\ndisabled    :: Optional{Bool}\nstyle       :: Optional{Int}\nlabel       :: Optional{String}\nemoji       :: Optional{Ekztazy.Emoji}\nurl         :: Optional{String}\noptions     :: Optional{Vector{Ekztazy.SelectOption}}\nplaceholder :: Optional{String}\nmin_values  :: Optional{Int}\nmax_values  :: Optional{Int}\ncomponents  :: Optional{Vector{Ekztazy.Component}}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.Embed","page":"Types","title":"Ekztazy.Embed","text":"A Message embed. More details here.\n\nFields\n\ntitle       :: Optional{String}\ntype        :: Optional{String}\ndescription :: Optional{String}\nurl         :: Optional{String}\ntimestamp   :: Optional{DateTime}\ncolor       :: Optional{Int}\nfooter      :: Optional{Ekztazy.EmbedFooter}\nimage       :: Optional{Ekztazy.EmbedImage}\nthumbnail   :: Optional{Ekztazy.EmbedThumbnail}\nvideo       :: Optional{Ekztazy.EmbedVideo}\nprovider    :: Optional{Ekztazy.EmbedProvider}\nauthor      :: Optional{Ekztazy.EmbedAuthor}\nfields      :: Optional{Vector{Ekztazy.EmbedField}}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.EmbedThumbnail","page":"Types","title":"Ekztazy.EmbedThumbnail","text":"An Embed's thumbnail image information. More details here.\n\nFields\n\nurl       :: Optional{String}\nproxy_url :: Optional{String}\nheight    :: Optional{Int}\nwidth     :: Optional{Int}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.EmbedVideo","page":"Types","title":"Ekztazy.EmbedVideo","text":"An Embed's video information. More details here.\n\nFields\n\nurl    :: Optional{String}\nheight :: Optional{Int}\nwidth  :: Optional{Int}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.EmbedImage","page":"Types","title":"Ekztazy.EmbedImage","text":"An Embed's image information. More details here.\n\nFields\n\nurl       :: Optional{String}\nproxy_url :: Optional{String}\nheight    :: Optional{Int}\nwidth     :: Optional{Int}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.EmbedProvider","page":"Types","title":"Ekztazy.EmbedProvider","text":"An Embed's provider information. More details here.\n\nFields\n\nname :: Optional{String}\nurl  :: OptionalNullable{String}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.EmbedAuthor","page":"Types","title":"Ekztazy.EmbedAuthor","text":"An Embed's author information. More details here.\n\nFields\n\nname           :: Optional{String}\nurl            :: Optional{String}\nicon_url       :: Optional{String}\nproxy_icon_url :: Optional{String}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.EmbedFooter","page":"Types","title":"Ekztazy.EmbedFooter","text":"An Embed's footer information. More details here.\n\nFields\n\ntext           :: String\nicon_url       :: Optional{String}\nproxy_icon_url :: Optional{String}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.EmbedField","page":"Types","title":"Ekztazy.EmbedField","text":"An Embed field. More details here.\n\nFields\n\nname   :: String\nvalue  :: String\ninline :: Optional{Bool}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.Emoji","page":"Types","title":"Ekztazy.Emoji","text":"An emoji. More details here.\n\nFields\n\nid             :: Nullable{Snowflake}\nname           :: String\nroles          :: Optional{Vector{Snowflake}}\nuser           :: Optional{Ekztazy.User}\nrequire_colons :: Optional{Bool}\nmanaged        :: Optional{Bool}\nanimated       :: Optional{Bool}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.UnavailableGuild","page":"Types","title":"Ekztazy.UnavailableGuild","text":"An unavailable Discord guild (server). More details here.\n\nFields\n\nid          :: Snowflake\nunavailable :: Optional{Bool}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.VerificationLevel","page":"Types","title":"Ekztazy.VerificationLevel","text":"A Guild's verification level. More details here.\n\n\n\n\n\n","category":"module"},{"location":"types/#Ekztazy.MessageNotificationLevel","page":"Types","title":"Ekztazy.MessageNotificationLevel","text":"A Guild's default message notification level. More details here.\n\n\n\n\n\n","category":"module"},{"location":"types/#Ekztazy.ExplicitContentFilterLevel","page":"Types","title":"Ekztazy.ExplicitContentFilterLevel","text":"A Guild's explicit content filter level. More details here.\n\n\n\n\n\n","category":"module"},{"location":"types/#Ekztazy.MFALevel","page":"Types","title":"Ekztazy.MFALevel","text":"A Guild's MFA level. More details here.\n\n\n\n\n\n","category":"module"},{"location":"types/#Ekztazy.GuildEmbed","page":"Types","title":"Ekztazy.GuildEmbed","text":"A Guild embed. More details here.\n\nFields\n\nenabled    :: Bool\nchannel_id :: Nullable{Snowflake}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.Integration","page":"Types","title":"Ekztazy.Integration","text":"A Guild integration. More details here.\n\nFields\n\nid                  :: Snowflake\nname                :: String\ntype                :: String\nenabled             :: Bool\nsyncing             :: Bool\nrole_id             :: Snowflake\nexpire_behaviour    :: Int\nexpire_grace_period :: Int\nuser                :: Ekztazy.User\naccount             :: Ekztazy.IntegrationAccount\nsynced_at           :: DateTime\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.IntegrationAccount","page":"Types","title":"Ekztazy.IntegrationAccount","text":"An Integration account. More details here.\n\nFields\n\nid   :: String\nname :: String\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.Interaction","page":"Types","title":"Ekztazy.Interaction","text":"An interaction. More details here.\n\nFields\n\nid             :: Nullable{Snowflake}\napplication_id :: Nullable{Snowflake}\ntype           :: Int\ndata           :: OptionalNullable{Ekztazy.InteractionData}\nguild_id       :: Optional{Snowflake}\nchannel_id     :: Optional{Snowflake}\nmember         :: Optional{Ekztazy.Member}\nuser           :: Optional{Ekztazy.User}\ntoken          :: String\nversion        :: Optional{Int}\nmessage        :: Optional{Ekztazy.Message}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.InteractionData","page":"Types","title":"Ekztazy.InteractionData","text":"Data for an interaction. More details here.\n\nFields\n\nid             :: OptionalNullable{Snowflake}\nname           :: OptionalNullable{String}\ntype           :: OptionalNullable{Int}\nresolved       :: Optional{Ekztazy.ResolvedData}\noptions        :: Optional{Vector{Ekztazy.ApplicationCommandOption}}\ncustom_id      :: OptionalNullable{String}\ncomponent_type :: OptionalNullable{Int}\nvalues         :: Optional{Vector{String}}\ntarget_id      :: Optional{Snowflake}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.Invite","page":"Types","title":"Ekztazy.Invite","text":"An invite to a Guild. More details here.\n\nFields\n\ncode                       :: String\nguild                      :: Optional{Ekztazy.Guild}\nchannel                    :: Ekztazy.DiscordChannel\napproximate_presence_cound :: Optional{Int}\napproximate_member_count   :: Optional{Int}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.InviteMetadata","page":"Types","title":"Ekztazy.InviteMetadata","text":"Metadata for an Invite. More details here.\n\nFields\n\ninviter    :: Ekztazy.User\nuses       :: Int\nmax_uses   :: Int\nmax_age    :: Int\ntemporary  :: Bool\ncreated_at :: DateTime\nrevoked    :: Bool\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.Member","page":"Types","title":"Ekztazy.Member","text":"A Guild member. More details here.\n\nFields\n\nuser          :: Optional{Ekztazy.User}\nnick          :: OptionalNullable{String}\nroles         :: Vector{Snowflake}\njoined_at     :: DateTime\npremium_since :: OptionalNullable{DateTime}\ndeaf          :: Optional{Bool}\nmute          :: Optional{Bool}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.MessageActivity","page":"Types","title":"Ekztazy.MessageActivity","text":"A Message activity. More details here.\n\nFields\n\ntype     :: Int\nparty_id :: Optional{String}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.MessageApplication","page":"Types","title":"Ekztazy.MessageApplication","text":"A Rich Presence Message's application information. More details here.\n\nFields\n\nid          :: Snowflake\ncover_image :: Optional{String}\ndescription :: String\nicon        :: String\nname        :: String\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.MessageType","page":"Types","title":"Ekztazy.MessageType","text":"A Message's type. More details here.\n\n\n\n\n\n","category":"module"},{"location":"types/#Ekztazy.MessageActivityType","page":"Types","title":"Ekztazy.MessageActivityType","text":"A Message's activity type. More details here.\n\n\n\n\n\n","category":"module"},{"location":"types/#Ekztazy.Overwrite","page":"Types","title":"Ekztazy.Overwrite","text":"A permission overwrite. More details here.\n\nFields\n\nid    :: Snowflake\ntype  :: Int\nallow :: String\ndeny  :: String\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.Presence","page":"Types","title":"Ekztazy.Presence","text":"A User's presence. More details here.\n\nFields\n\nuser       :: Ekztazy.User\nroles      :: Optional{Vector{Snowflake}}\ngame       :: Nullable{Ekztazy.Activity}\nguild_id   :: Optional{Snowflake}\nstatus     :: String\nactivities :: Vector{Ekztazy.Activity}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.Reaction","page":"Types","title":"Ekztazy.Reaction","text":"A Message reaction. More details here.\n\nFields\n\ncount :: Int\nme    :: Bool\nemoji :: Ekztazy.Emoji\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.Role","page":"Types","title":"Ekztazy.Role","text":"A User role. More details here.\n\nFields\n\nid          :: Snowflake\nname        :: String\ncolor       :: Optional{Int}\nhoist       :: Optional{Bool}\nposition    :: Optional{Int}\npermissions :: Optional{String}\nmanaged     :: Optional{Bool}\nmentionable :: Optional{Bool}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.SelectOption","page":"Types","title":"Ekztazy.SelectOption","text":"A select option. More details here.\n\nFields\n\nlabel       :: String\nvalue       :: String\ndescription :: Optional{String}\nemoji       :: Optional{Ekztazy.Emoji}\ndefault     :: Optional{Bool}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.User","page":"Types","title":"Ekztazy.User","text":"A Discord user. More details here.\n\nFields\n\nid            :: Snowflake\nusername      :: Optional{String}\ndiscriminator :: Optional{String}\navatar        :: OptionalNullable{String}\nbot           :: Optional{Bool}\nmfa_enabled   :: Optional{Bool}\nlocale        :: Optional{String}\nverified      :: Optional{Bool}\nemail         :: OptionalNullable{String}\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.VoiceRegion","page":"Types","title":"Ekztazy.VoiceRegion","text":"A region for a Guild's voice server. More details here.\n\nFields\n\nid         :: String\nname       :: String\nvip        :: Bool\noptimal    :: Bool\ndeprecated :: Bool\ncustom     :: Bool\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.VoiceState","page":"Types","title":"Ekztazy.VoiceState","text":"A User's voice connection status. More details here.\n\nFields\n\nguild_id   :: Optional{Snowflake}\nchannel_id :: Nullable{Snowflake}\nuser_id    :: Snowflake\nmember     :: Optional{Ekztazy.Member}\nsession_id :: String\ndeaf       :: Bool\nmute       :: Bool\nself_deaf  :: Bool\nself_mute  :: Bool\nsuppress   :: Bool\n\n\n\n\n\n","category":"type"},{"location":"types/#Ekztazy.Webhook","page":"Types","title":"Ekztazy.Webhook","text":"A Webhook. More details here.\n\nFields\n\nid         :: Snowflake\nguild_id   :: Optional{Snowflake}\nchannel_id :: Snowflake\nuser       :: Optional{Ekztazy.User}\nname       :: Nullable{String}\navatar     :: Nullable{String}\ntoken      :: Optional{String}\n\n\n\n\n\n","category":"type"}]
}
